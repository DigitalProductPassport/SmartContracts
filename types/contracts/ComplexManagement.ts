/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ComplexManagement {
  export type ComplexStruct = {
    complexId: string;
    complexName: string;
    complexCountry: string;
    complexAddress: string;
    complexSiteType: string;
    complexIndustry: string;
    latitude: string;
    longitude: string;
  };

  export type ComplexStructOutput = [
    complexId: string,
    complexName: string,
    complexCountry: string,
    complexAddress: string,
    complexSiteType: string,
    complexIndustry: string,
    latitude: string,
    longitude: string
  ] & {
    complexId: string;
    complexName: string;
    complexCountry: string;
    complexAddress: string;
    complexSiteType: string;
    complexIndustry: string;
    latitude: string;
    longitude: string;
  };
}

export interface ComplexManagementInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addComplex"
      | "addContributor"
      | "complexes"
      | "contributors"
      | "geolocationContract"
      | "getComplex"
      | "owner"
      | "removeContributor"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ComplexAdded" | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addComplex",
    values: [string, string, string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addContributor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "complexes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "contributors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "geolocationContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getComplex", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeContributor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "addComplex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addContributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "complexes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "geolocationContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getComplex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeContributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ComplexAddedEvent {
  export type InputTuple = [
    complexId: string,
    complexName: string,
    complexCountry: string,
    complexAddress: string,
    complexSiteType: string,
    complexIndustry: string,
    latitude: string,
    longitude: string
  ];
  export type OutputTuple = [
    complexId: string,
    complexName: string,
    complexCountry: string,
    complexAddress: string,
    complexSiteType: string,
    complexIndustry: string,
    latitude: string,
    longitude: string
  ];
  export interface OutputObject {
    complexId: string;
    complexName: string;
    complexCountry: string;
    complexAddress: string;
    complexSiteType: string;
    complexIndustry: string;
    latitude: string;
    longitude: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ComplexManagement extends BaseContract {
  connect(runner?: ContractRunner | null): ComplexManagement;
  waitForDeployment(): Promise<this>;

  interface: ComplexManagementInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addComplex: TypedContractMethod<
    [
      _complexId: string,
      _complexName: string,
      _complexCountry: string,
      _complexAddress: string,
      _latitude: string,
      _longitude: string,
      _complexSiteType: string,
      _complexIndustry: string
    ],
    [void],
    "nonpayable"
  >;

  addContributor: TypedContractMethod<
    [_contributor: AddressLike],
    [void],
    "nonpayable"
  >;

  complexes: TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, string, string, string, string, string] & {
        complexId: string;
        complexName: string;
        complexCountry: string;
        complexAddress: string;
        complexSiteType: string;
        complexIndustry: string;
        latitude: string;
        longitude: string;
      }
    ],
    "view"
  >;

  contributors: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  geolocationContract: TypedContractMethod<[], [string], "view">;

  getComplex: TypedContractMethod<
    [_complexId: string],
    [ComplexManagement.ComplexStructOutput],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  removeContributor: TypedContractMethod<
    [_contributor: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addComplex"
  ): TypedContractMethod<
    [
      _complexId: string,
      _complexName: string,
      _complexCountry: string,
      _complexAddress: string,
      _latitude: string,
      _longitude: string,
      _complexSiteType: string,
      _complexIndustry: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addContributor"
  ): TypedContractMethod<[_contributor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "complexes"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, string, string, string, string, string] & {
        complexId: string;
        complexName: string;
        complexCountry: string;
        complexAddress: string;
        complexSiteType: string;
        complexIndustry: string;
        latitude: string;
        longitude: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "contributors"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "geolocationContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getComplex"
  ): TypedContractMethod<
    [_complexId: string],
    [ComplexManagement.ComplexStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeContributor"
  ): TypedContractMethod<[_contributor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ComplexAdded"
  ): TypedContractEvent<
    ComplexAddedEvent.InputTuple,
    ComplexAddedEvent.OutputTuple,
    ComplexAddedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "ComplexAdded(string,string,string,string,string,string,string,string)": TypedContractEvent<
      ComplexAddedEvent.InputTuple,
      ComplexAddedEvent.OutputTuple,
      ComplexAddedEvent.OutputObject
    >;
    ComplexAdded: TypedContractEvent<
      ComplexAddedEvent.InputTuple,
      ComplexAddedEvent.OutputTuple,
      ComplexAddedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
