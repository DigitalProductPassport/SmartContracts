/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ProductDetails {
  export type ProductStruct = {
    uid: string;
    gtin: string;
    taricCode: string;
    manufacturerInfo: string;
    consumerInfo: string;
    endOfLifeInfo: string;
  };

  export type ProductStructOutput = [
    uid: string,
    gtin: string,
    taricCode: string,
    manufacturerInfo: string,
    consumerInfo: string,
    endOfLifeInfo: string
  ] & {
    uid: string;
    gtin: string;
    taricCode: string;
    manufacturerInfo: string;
    consumerInfo: string;
    endOfLifeInfo: string;
  };
}

export interface ProductDetailsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "authorizeEntity"
      | "authorizedEntities"
      | "getProduct"
      | "products"
      | "revokeEntity"
      | "setProduct"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "authorizeEntity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedEntities",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "products",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeEntity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProduct",
    values: [BigNumberish, string, string, string, string, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "authorizeEntity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedEntities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProduct", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "products", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeEntity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setProduct", data: BytesLike): Result;
}

export interface ProductDetails extends BaseContract {
  connect(runner?: ContractRunner | null): ProductDetails;
  waitForDeployment(): Promise<this>;

  interface: ProductDetailsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  authorizeEntity: TypedContractMethod<
    [entity: AddressLike],
    [void],
    "nonpayable"
  >;

  authorizedEntities: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  getProduct: TypedContractMethod<
    [productId: BigNumberish],
    [ProductDetails.ProductStructOutput],
    "view"
  >;

  products: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, string, string] & {
        uid: string;
        gtin: string;
        taricCode: string;
        manufacturerInfo: string;
        consumerInfo: string;
        endOfLifeInfo: string;
      }
    ],
    "view"
  >;

  revokeEntity: TypedContractMethod<
    [entity: AddressLike],
    [void],
    "nonpayable"
  >;

  setProduct: TypedContractMethod<
    [
      productId: BigNumberish,
      uid: string,
      gtin: string,
      taricCode: string,
      manufacturerInfo: string,
      consumerInfo: string,
      endOfLifeInfo: string
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "authorizeEntity"
  ): TypedContractMethod<[entity: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedEntities"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getProduct"
  ): TypedContractMethod<
    [productId: BigNumberish],
    [ProductDetails.ProductStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "products"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, string, string] & {
        uid: string;
        gtin: string;
        taricCode: string;
        manufacturerInfo: string;
        consumerInfo: string;
        endOfLifeInfo: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "revokeEntity"
  ): TypedContractMethod<[entity: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProduct"
  ): TypedContractMethod<
    [
      productId: BigNumberish,
      uid: string,
      gtin: string,
      taricCode: string,
      manufacturerInfo: string,
      consumerInfo: string,
      endOfLifeInfo: string
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
