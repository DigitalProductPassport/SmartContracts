/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Geolocation {
  export type GeoLocationStruct = {
    latitude: string;
    longitude: string;
    additionalInfo: string;
  };

  export type GeoLocationStructOutput = [
    latitude: string,
    longitude: string,
    additionalInfo: string
  ] & { latitude: string; longitude: string; additionalInfo: string };
}

export interface GeolocationInterface extends Interface {
  getFunction(
    nameOrSignature: "geolocations" | "getGeolocation" | "setGeolocation"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "GeolocationAdded"): EventFragment;

  encodeFunctionData(
    functionFragment: "geolocations",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getGeolocation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setGeolocation",
    values: [string, string, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "geolocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGeolocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGeolocation",
    data: BytesLike
  ): Result;
}

export namespace GeolocationAddedEvent {
  export type InputTuple = [
    id: string,
    latitude: string,
    longitude: string,
    additionalInfo: string
  ];
  export type OutputTuple = [
    id: string,
    latitude: string,
    longitude: string,
    additionalInfo: string
  ];
  export interface OutputObject {
    id: string;
    latitude: string;
    longitude: string;
    additionalInfo: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Geolocation extends BaseContract {
  connect(runner?: ContractRunner | null): Geolocation;
  waitForDeployment(): Promise<this>;

  interface: GeolocationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  geolocations: TypedContractMethod<
    [arg0: string],
    [
      [string, string, string] & {
        latitude: string;
        longitude: string;
        additionalInfo: string;
      }
    ],
    "view"
  >;

  getGeolocation: TypedContractMethod<
    [id: string],
    [Geolocation.GeoLocationStructOutput],
    "view"
  >;

  setGeolocation: TypedContractMethod<
    [id: string, latitude: string, longitude: string, additionalInfo: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "geolocations"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, string] & {
        latitude: string;
        longitude: string;
        additionalInfo: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGeolocation"
  ): TypedContractMethod<
    [id: string],
    [Geolocation.GeoLocationStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "setGeolocation"
  ): TypedContractMethod<
    [id: string, latitude: string, longitude: string, additionalInfo: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "GeolocationAdded"
  ): TypedContractEvent<
    GeolocationAddedEvent.InputTuple,
    GeolocationAddedEvent.OutputTuple,
    GeolocationAddedEvent.OutputObject
  >;

  filters: {
    "GeolocationAdded(string,string,string,string)": TypedContractEvent<
      GeolocationAddedEvent.InputTuple,
      GeolocationAddedEvent.OutputTuple,
      GeolocationAddedEvent.OutputObject
    >;
    GeolocationAdded: TypedContractEvent<
      GeolocationAddedEvent.InputTuple,
      GeolocationAddedEvent.OutputTuple,
      GeolocationAddedEvent.OutputObject
    >;
  };
}
