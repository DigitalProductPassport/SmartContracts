name: Smart Contract CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths:
      - 'contracts/**'
      - 'test/**'
      - 'scripts/**'
      - 'package.json'

permissions:
  id-token: write
  contents: write
  security-events: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          # Remove cache option since there's no lock file
          # Or set cache-dependency-path explicitly if needed
      
      - name: Install dependencies and create lock file
        run: npm install --legacy-peer-deps

      - name: Install OpenZeppelin contracts
        run: | 
          npm install @openzeppelin/contracts
          npm install @openzeppelin/contracts-upgradeable
      
      - name: Compile contracts
        run: npx hardhat compile
        continue-on-error: false
      
      - name: Run linter
        run: npx solhint 'contracts/**/*.sol'
        continue-on-error: true
      
      - name: Run tests with coverage
        run: npx hardhat coverage
        continue-on-error: true

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Run Slither
        uses: crytic/slither-action@v0.4.0
        id: slither
        with:
          node-version: 18
          sarif: slither-results.sarif
          fail-on: none
          target: contracts
          solc-version: 0.8.20
          ignore-compile: true
        continue-on-error: true
      
      - name: Install Mythril
        run: |
          pip install mythril
        continue-on-error: true
      
      - name: Run Mythril Analysis
        run: |
          mkdir -p reports
          # Get all Solidity files from the contracts directory
          echo "Analyzing $file with Mythril..."
          myth analyze contracts/*.sol --solc-json solc-config.json --markdown-report reports/$(basename "$file").md
        continue-on-error: true

      - name: Run Echidna
        uses: crytic/echidna-action@v2
        with:
          solc-version: '0.8.20'
          files: 'contracts/ProductPassportEchidnaTest.sol'
          contract: 'ProductPassportEchidnaTest'
          corpus-dir: 'corpus'
          config: 'echidna.yaml'
          test-mode: 'assertion'
          format: 'json'
          output-file: 'echidna-output.json'
        continue-on-error: true

  gas-reporter:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          # Remove cache option
      
      - name: Install dependencies
        run: npm install
      
      - name: Run gas reporter
        run: |
          REPORT_GAS=true npx hardhat test
        env:
          COINMARKETCAP_API_KEY: ${{ secrets.COINMARKETCAP_API_KEY }}
        continue-on-error: true

  publish:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          registry-url: "https://registry.npmjs.org"
          # Remove cache option
      
      - name: Install dependencies
        run: npm install

      - name: Set Git user
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Extract version from package.json
        id: package_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT_VERSION="${{ steps.package_version.outputs.version }}"
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH=${{ github.run_number }}
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update version
        run: npm version ${{ steps.new_version.outputs.version }} --no-git-tag-version

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.new_version.outputs.version }}
          name: Release v${{ steps.new_version.outputs.version }}
          generate_release_notes: true
          draft: false
          prerelease: false

      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --provenance --access public